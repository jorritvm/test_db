print("done")
.libPaths()
version()
version
profvis::profvis({
print("hi")
M10 = matrix(sample(1000:2000,10000,replace=TRUE),ncol=100)
M11 = matrix(sample(1000:2000,10000,replace=TRUE),ncol=100)
M12 = M10 %*% M11
print("done")
})
print("hi")
M10 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M11 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M12 = M10 %*% M11
print("done")
profvis::profvis({
print("hi")
M10 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M11 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M12 = M10 %*% M11
print("done")
})
print("hi")
M10 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M11 = matrix(sample(1000:2000,1000000,replace=TRUE),ncol=1000)
M12 = M10 %*% M11
print("done")
library("benchmarkme")
install.packages("benchmarkme")
library("benchmarkme")
get_cpu()
library(shiny)
runExample("01_hello") # a histogram
install.packages("shiny")
library(shinydashboard)
oin,()
library(shinydashboard)
install.packages("shinydashboard")
library(shiny)
runExample("01_hello") # a histogram
source("~/.active-rstudio-document")
install.packages("ggplot2")
source("~/.active-rstudio-document")
install.packages("DT")
source("~/.active-rstudio-document")
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
instal
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
source("~/.active-rstudio-document")
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
library(RSQLite)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# get data
data("mtcars")
mtcars$car_names <- rownames(mtcars)
rownames(mtcars) <- c()
head(mtcars)
# create db & write the data
conn <- dbConnect(RSQLite::SQLite(), "cars_db.db")
dbWriteTable(conn, "cars_data", mtcars)
# verify
dbListTables(conn)
# add new data
car <- c('Camaro', 'California', 'Mustang', 'Explorer')
make <- c('Chevrolet','Ferrari','Ford','Ford')
df1 <- data.frame(car,make)
car <- c('Corolla', 'Lancer', 'Sportage', 'XE')
make <- c('Toyota','Mitsubishi','Kia','Jaguar')
df2 <- data.frame(car,make)
# Add them to a list
dfList <- list(df1,df2)
dfList
# Write a table by appending the data frames inside the list
for(k in 1:length(dfList)){
dbWriteTable(conn,"Cars_and_Makes", dfList[[k]], append = TRUE)
}
# List all the Tables
dbListTables(conn)
# verify
x = dbGetQuery(conn, "SELECT * FROM Cars_and_Makes")
x
str(x)
# some more advanced sql queries:
dbGetQuery(conn,"SELECT car_names, hp, cyl FROM cars_data
WHERE car_names LIKE 'M%' AND cyl IN (6,8)")
dbGetQuery(conn,"SELECT cyl, AVG(hp) AS 'average_hp', AVG(mpg) AS 'average_mpg' FROM cars_data
GROUP BY cyl
ORDER BY average_hp")
# use a variable to define values in sql query
# Lets assume that there is some user input that asks us to look only into cars that have over 18 miles per gallon (mpg)
# and more than 6 cylinders
mpg <-  18
cyl <- 6
Result <- dbGetQuery(conn, 'SELECT car_names, mpg, cyl FROM cars_data WHERE mpg >= ? AND cyl >= ?', params = c(mpg,cyl))
Result
# get query vs execute
# Visualize the table before deletion
dbGetQuery(conn, "SELECT * FROM cars_data LIMIT 10")
# Delete the column belonging to the Mazda RX4. You will see a 1 as the output.
dbExecute(conn, "DELETE FROM cars_data WHERE car_names = 'Mazda RX4'")
# Visualize the new table after deletion
dbGetQuery(conn, "SELECT * FROM cars_data LIMIT 10")
# reinsert deletd record
dbExecute(conn, "INSERT INTO cars_data VALUES (21.0,6,160.0,110,3.90,2.620,16.46,0,1,4,4,'Mazda RX4')")
# Close the database connection to CarsDB
dbDisconnect(conn)
install.packages("dbplyr")
# List all the Tables
dbListTables(conn)
source("D:/dev/R/db_sqlite_test/02-dplyr_db.R")
library(RSQLite)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# connect to the DB
conn <- dbConnect(RSQLite::SQLite(), "cars-db.db")
# List all the Tables
dbListTables(conn)
# connect to the DB
conn <- dbConnect(RSQLite::SQLite(), "cars_db.db")
# List all the Tables
dbListTables(conn)
source("D:/dev/R/db_sqlite_test/02-dplyr_db.R")
rstudioapi::askForPassword("Database password")
nycflights13::flights
install.packages("nycflights13")
nycflights13::flights
library(dplyr)
# add a table to this DB
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
# add a table to this DB
copy_to(conn, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
library(RSQLite)
library(dplyr)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# connect to the DB
conn <- dbConnect(RSQLite::SQLite(), "flights_db.db")
# List all the Tables
dbListTables(conn)
# add a table to this DB
copy_to(conn, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
# List all the Tables
dbListTables(conn)
dbGetInfo(conn)
dbReadTable(conn, "sqlite_stat1")
dbReadTable(conn, "sqlite_stat4")
dbReadTable(conn, "flights")
str(dbReadTable(conn, "flights"))
str(nycflights13::flights)
library(RSQLite)
# second try
dtCreateTable
# second try
dbCreateTable(conn, "flights2", nycflights13::flights)
dbListTables(conn)
str(dbReadTable(conn, "flights2"))
dbAppendTable(conn, "flights2", nycflights13::flights)
dbListTables(conn)
str(dbReadTable(conn, "flights2"))
# Close the database connection to CarsDB
dbDisconnect(conn)
from_memory = nycflights13::flights[1]
from_memory
nycflights13::flights[1,]
from_memory = nycflights13::flights[1, time_hour]
from_memory = nycflights13::flights[1, "time_hour"]
from_memory
dbReadTable(conn, "flights")[1, "time_hour"]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# connect to the DB
conn <- dbConnect(RSQLite::SQLite(), "flights_db.db")
dbReadTable(conn, "flights")[1, "time_hour"]
from_memory = nycflights13::flights[1, "time_hour"]
from_db = as.POSIXct(dbReadTable(conn, "flights")[1, "time_hour"], origin = "1970-01-01")
from_db
from_memory
as.data.table(from_memory)
library(data.table)
as.data.table(from_memory)
# List all the Tables
dbListTables(conn)
# dplyr select query:
flights_db <- tbl(conn, "flights")
show_query()
flights_db %>% select(year:day, dep_delay, arr_delay)
show_query()
q = flights_db %>% select(year:day, dep_delay, arr_delay)
show_query(q)
q = flights_db %>% filter(dep_delay > 240)
show_query(q)
# dplyr does SQL in the background (but lazilly):
flights_db <- tbl(conn, "flights")
q = flights_db %>% select(year:day, dep_delay, arr_delay)
show_query(q)
flights_db <- tbl(conn, "flights")
flights_db %>% select(year:day, dep_delay, arr_delay)
flights_db %>% filter(dep_delay > 240)
flights_db %>%
group_by(dest) %>%
summarise(delay = mean(dep_time))
nycflights13::flights
as.data.table(nycflights13::flights)
dt = as.data.table(nycflights13::flights)
str(dt)
dt[, unique(year)]
for i in 2000:2020:
print(i)
for i = 2000:2020:
print(i)
for (i in 2000:2020) {
print(i)
}
dt = as.data.table(nycflights13::flights)
dtlist = list()
for (i in 2000:2020) {
dtlist[[i]] = dt
}
dt = rbindlist(dt, idcol = "year")
library(jrutils)
dtlist
dt = as.data.table(nycflights13::flights)
dtlist = list()
for (i in 2000:2020) {
dtlist[[as.character(i)]] = dt
}
dtlist
dt = rbindlist(dt, idcol = "year")
dt = as.data.table(nycflights13::flights)
dtlist = list()
for (i in 2000:2020) {
dtlist[[i]] = dt
}
dt = rbindlist(dtlist, idcol = "year")
dt
print_var_size(dt)
data.frame(dt)
str(data.frame(dt)à
str(data.frame(dt))
df = data.frame(rbindlist(dtlist, idcol = "year"))
print_var_size(df) # 840MB nice!
# write this dataframe as an RDS to the disk
tik("writing data table to RDS")
saveRDS(object = as.data.table(df), file = "flights_rds.RDS")
tok()
# write this dataframe as an RDS to the disk
tic("writing data table to RDS")
toc()
library(tictoc)
# write this dataframe as an RDS to the disk
tic("writing data table to RDS")
toc()
# write this dataframe as an RDS to the disk
tic("writing data table to RDS")
saveRDS(object = as.data.table(df), file = "flights_rds.RDS")
toc()
tic("writing to sqlite")
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
dbCreateTable(conn, "flights", df)
dbAppendTable(conn, "flights", df)
dbDisconnect(conn)
toc()
dbDisconnect(conn)
# write it as a sqlite
tic("writing to sqlite")
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
dbCreateTable(con, "flights", df)
dbAppendTable(con, "flights", df)
dbDisconnect(con)
toc()
tic("writing data table to RDS")
saveRDS(object = as.data.table(df), file = "flights_rds_uncompressed.RDS", compress = FALSE)
toc() # 30.56s -> 141MB
## TEST 2: reading from disk to perform a query
# data table : read entire RDS file, then do query in memory
dt = readRDS("flights_rds.RDS")
dim(dt)
dt
dt[, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, destination) ]
class(dt)
dt[, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, destination) ]
dt[, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, dest) ]
dt[, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, dest)][order(-mean_air)]
system.time({dt[, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, dest)][order(-mean_air)]})
system.time({dt[distance > 200, .(mean_air = mean(air_time, na.rm = TRUE)), by = .(year, origin, dest)][order(-mean_air)]})
# write the query in dplyr and perform the operation in sqlite
flights_db <- tbl(con, "flights")
# write the query in dplyr and perform the operation in sqlite
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
flights_db <- tbl(con, "flights")
flights_db %>% filter(dist > 200)
flights_db
flights_db %>% filter(distance > 200)
flights_db %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE))
flights_db %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(-mean_air)
flights_db %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(mean_air)
flights_db %>%
group_by(year, origin, dest) %>%
summarise_all(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(mean_air)
flights_db %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air))
x
x = dt[distance > 200,
.(mean_air = mean(air_time, na.rm = TRUE)),
by = .(year, origin, dest)][order(-mean_air)]
x
flights_db
head(flights_db)
flights_db %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air))
# write the query in dplyr and perform the operation in sqlite
tic("reading the whole table entirely from db")
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
y = dbReadTable(con, "flights")
dbDisconnect(con)
toc()
tic("total rds work")
tic("reading rds")
dt = readRDS("flights_rds.RDS")
toc()
tic("aggregating")
x = dt[distance > 200,
.(mean_air = mean(air_time, na.rm = TRUE)),
by = .(year, origin, dest)][order(-mean_air)]
toc()
x
toc()
dt
y
dim(dt)
dim(y)
dbDisconnect(con)
result =  tbl(con, "flights") %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air))
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
result =  tbl(con, "flights") %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air))
showquery(result)
show_query(result)
result =  tbl(con, "flights") %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air)) %>%
collect()
result
tic("aggregation query in dB")
con <- dbConnect(RSQLite::SQLite(), "flights2_db.db")
result =  tbl(con, "flights") %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air)) %>%
collect()
dbDisconnect(con)
toc()
install.packages("dtplyr")
library(dtplyr)
library(dplyr)
## TEST 3:
# perform the DT aggregation using DTplyer
dtp = dt %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air))
dtp
## TEST 3:
# perform the DT aggregation using DTplyer
dtp = dt %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air)) %>%
as.data.table()
dtp
x
identical(dtp, x)
tic("aggregating using dtplyr")
z = dt %>%
filter(distance > 200) %>%
group_by(year, origin, dest) %>%
summarise(mean_air = mean(air_time, na.rm = TRUE)) %>%
arrange(desc(mean_air)) %>%
as.data.table()
toc()
